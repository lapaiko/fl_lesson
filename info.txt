ЯК ЦЕ ЗРОБИТИ - пройдений матеріал

1. 0_00_doit - робота з github
2. 0_04_doit - бургер меню


НАВЧАННЯ ТА ЗАВДАННЯ - пройдений матеріал 

1. 03_folder - організація тек у проекті
2. 04_html - теги header-блок-голова, nav-блок-навігація, footer-блок-підвал, div-блок-контент.  
3. 05_html - теги h-заголовку, p-абзац, span-стрічка, a-посилання, imj-картика, li-список: ol-нумерований, ul-маркований
	Лайфхаки уроку 3:
	- Як в VScode обвернути текст тегом гарячими клавішами
	- Як в VScode обвернути кілька стрічок тегом
	- Редагування початкової та кінцевої назви тегу
4. 06_html - теги: 
	- form-форма, input: 
		- text-текстове поле, 
		- password-паорль, 
		- radio-пермикачі,
		- checkbox-чекбокси, 
		- file-вибір файлу; 
	- textarea-багатострічне поле вводу, 
	- select-список: 
	- option-пункти;
	- button - кнопка: submit-пердати, reset-очистити

5. 07_css - синтаксис + обнулення
	- стиль по назві тегу
	- стиль тегів по назві класу
	- орядок запису параметрів та селекторів
	- пріоритетність записів
	- вкладеність
	- багаторівнева вкладенність
	- наслідування параметрів
	- обнулюючі стилі	
6. 08-css стили шрифта та текстц:
	- селектори, параметр, властивості, значення<
	- властивість шрифта font-family - встанолює сімейство шрифта
	- властивість шрифта font-size - встанолює розмір шрифта
	- властивість шрифта font-style - встанолює начертання шрифта
	- властивість шрифта font-weight - встанолює насиченість шрифта
	- властивість шрифта color - встанолює колір шрифта
	- властивість тексту text-align - вирівнювання текcту
	- властивість тексту text-decoration - додає оформлення тексту
	- властивість тексту text-shadow- додає текту тінь
	- властивість тексту text-transform - робить літери тексту прописними або заглавними
	- властивість тексту text-indent - починає текст з абзацу
	- властивість тексту letter-spacing - встаовлює інтервал між літерами
	- властивість тексту word-spacing - встаовлює інтервал між словами
	- властивість тексту white-space - керує властивостями пробілів між словами
	- властивість тексту line-height - встановлює міжстрочний інтервал
7. 09-css - властивості блоків:
	- padding внутрішній відступ блочних елементів
	- margin зовнішній відступ блочних елементів
	- width встановлює ширину блочних елементів та строкового IMG
	- max-width обмежує максимальну ширину блочних елементів та строкового IMG
	- min-width встановлює мінімальну ширину блочних елементів та строкового IMG
	- height встановлює висоту блочних елементів та строкового IMG
	- max-height обмежує максимальну висоту блочних елементів та строкового IMG
	- overflow курує відображенням вмісту блочних елементів
	- display багатоцільова властивість, що визначає як елемент повинен бути показан у документі	
8. 10_css - властивості і стилі оформлення блоків: 
	- border границя навколо елемента
	- border-radius встановлює радіус закруглення границі
	- outline-зовнішня границя блоку
	- box-shadow додає тінь елементу
	- opacity визначає рівень прозорості елемента
	- visibility призначена для відображення або скриття блоку
9. 11_css - властивості і стилі оформлення блоків: background
	- background або background-color - визначає колір фону елекмента
	- background або background-image - встановлює фонове зображення елемента або задає градієнтн
	- background або Background-repeat - визначає як буде повторюватись фонове зображення
	- background або background-position - задає початкову положення фонового зображення
	- background або background-attachment - визначає чи буде фонове зображення прокручуватись разом з змістом елемента
	- background або background-size - маштабує фонове зображення за вказаними розмірами.
	- background - установка кількох фонових зображень
	- вказівники списку фоновою картинкою	
10. 12 Теорія css - псевдокласи: 
	- hover - спрацьовує при наведені на елемент
	- visited - спрацьовує для відвіданих посилань
	- active - спрацьовує при натисканні на елемент
	- focus - спрацьовує при отриманні елементом фокусу
	- first-child, last-child - дозволяє звернутись до першрго або останнього елементу у блоці
	- nth-child - звернення до елементу за його номером у блоці
	- nth-child, hover - поєднання псевдокласів	
11. 13 Теорія css - псевдоелементи: 
	- first-line - задає стиль першої стрічки тексту
	- first-letter - визначає стиль першої літери
	- before, after - застосовується для відображення бажаного контенту до/після вмісту елемента до якого він додається
	- input -ms-clear - прибирає хрестик у полі вооду для IE & Edge
	- before + hover - комбінування псевдокласів з псевдоелементами
12. 14 Теорія css - позиціонування:
	- static - позиціонування за властивостями типу елемента стрічковий/блочний (за замовчуванням)
	- relative - позиціонується за початковими координатами батьківського блоку 
	- absolute - позиціонується за початковими координати вікна браузера або батьківського блоку з позиціонуванням relative;<br>
	- fixed - позиціонуєтьсяя за координатами вікна браузера 
	- sticky - позиціонується по вікну браузера при досягненні значень top, bottom елементу під час скролу контенту
13. 15 Теорія scss-sass - препроцесор: 
	- sass - має жорсткий синтакси де властивості класу: без дужок, починаються з нової стрічки, відступом у один Тав і без ";"
	- scss - синтаксис схожий з scc імає наступні властивості:
		- збережена властивість вкладення класу
		- ">" - звертається до наступного рівня вкладення
		- "<" - звертається до попереднього рівня вкладення
		- "&" - префікс зєднання назви батьківського класу з назвою дочірнього/псевдокласом/псевдоелементом
		- "$" - префікс змінних 
		- @import - ключове слово за яким у лапках вказується назва scss файлу для імпорту (наприклад "nullstylesass_15.scss");
		- "%"/"." - префікс шаблону
		- "@extend" - виклик шаблону
		- @mixin назва(змінні) { параметри } - міксін - аналог процедури у якій перлічені властивості з значеннями у вигляді змінних 
		- @include - виклик міксіна 
		- "+","-","*","/" - математичні операції
		- /**/ - коментар що перходить у результуючий CSS
		- // - коментар, що не перходить у результуючий CSS
14. 16 Теорія Fonfs - Підключення шрифтів: 
	- head - підключення через link
	- scss - підключення через @import url
	- конвертація шрифта з nomail.com.ua на www.font2web.com  
15. 17 Теорія БЕМ - блок елемент модифікатор: 
	- блок - незалежний компонент сторінки, що може бути використаний багато раз
	- елемент - складова блоку, що не може використовуватись у відриві від нього
	- модифікатор - доповнює / уточнює стиль блоку / елементу
	- мікс - використання і блоків і елементів в одному обєкті 
16. 18 Теорія META - мета теги для SEO: 
	- теги відображення
		- meta charset="UTF-8" - задає кодування сторінки<br>
		- meta http-equiv="Content-type" content="text/html;charset=UTF-8" - задає кодування сторінки (застарівший варіант)
		- meta name="viewport" content="width=1170" - фіксована верстка тобто маштабування (зменшення/збільшення шрифтів) відбувається завжди
		- meta name="viewport" content="width=device-width" - адаптивна верстка тобто маштабування (зменшення/збільшення шрифтів)	не відбувається, а верстка "ламається"
		- meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scale=0" де:
			- width=device-width - viewport контентної частини буде підлаштовуватись під ширину екрана
			- initial-scale=1.0 - встановлює початковий маштаб сторінки
			- maximum-scale=1.0 - встановлює максимальний маштаб сторінки
			- user-scale=0 - забороняємо маштабування контенту
		- meta name="format-detection" content="telephone=no" - відключення формування посилання у номера мобільного на iOS

	- тегі SEO
		- meta name="description" content="Що таке мета тегі і для чого вони потрібні" - короткий опис сторінки до 140 символів
		- meta name="keywords" content="мета тегі, meta, мета теги для seo" - ключові слова, що характеризують наш контент не більше 20
		- meta name="robots" content="" - керування доступом пошукових роботів до сторінки
			- none – заборонити індексацію сторінки повністю.
			- noindex – заборонити індексацію вмісту сторінки.
			- nofollow – ігнорувати посилання у межах веб-сторінки.
			- noimageindex – заборонити індексацію присутніх на сторінці зображень
			- noarchive - заборонити висновок у результатах пошуку посилання «Збережена копія»
			- nosnippet - заборонити виведення у пошуковій видачі під назвою сторінки фрагмента тексту, що описує її зміст.

	- технічні теги
		- meta name="Author" content="Дарт Вейдер" - автор сторінки 
		- meta name="Copyright" content="Люк Скайуокер" - Авторські права
		- meta name="Address" content="Татуін, кратер №94" - Адрес автора
		- meta http-equiv="refresh" content="0; url=" - результатах (перзавантаження) сторінки
	
	- теги соціальних мереж
		- facebook
			- meta property="og:locale" content="ua_UA" - локалізація сайту, для російськомовного сайту ua_UA
			- meta property="og:type" content="article" - тип контенту, за умовчанням використовується article
			- meta property="og:title" content="META теги" - заголовок сторінки, який буде виводитись у записі соціальної мережі
			- meta property="og:description" content="Опис сторінки про теги META" - опис сторінки
			- meta property="og:image" content="http://fls.guru/meta/img/bg.jpg"- посилання на зображення, яке публікуватиметься у записі
			- meta property="og:url" content="http://fls.guru/meta/" - посилання на поточну сторінку
			- meta property="og:site_name" content="Фрілансер з життя" - назва сайту
		- twitter
			- meta name="twitter:card" content="summary" - тип картки, за умовчанням використовується summary
			- meta name="twitter:site" content="Жека" - ім'я/логін автора
			- meta name="twitter:title" content="META теги" - назва сторінки
			- meta name="twitter:description" content="про META теги" - опис сторінки
			- meta name="twitter:image" content="http://fls.guru/meta/img/bg.jpg" - посилання на зображення
17. 19 Теорія flex - контейнера: 
	- display:flex - блочний flex-контенерза замовчуванням:
		- контейнер займає всю ширину області в якій він знаходиться (блочний)
		- елементи стають в ряд, не перходять на іншу стрічку і не стискаються (строчний) 
	- display:inline-flex - строчний flex-контенер за замовчуванням:
		- контейнер займає ширину вмісту (строчний)
		- елементи стають в ряд, не перходять на іншу стрічку і не стискаються (строчний)
	- justify-content - вирівнювання за основною віссю:
		- flex-start - вирівнювання по лівому краю (між елементами немає простору);
		- center - вирівнювання по центру (між елементами немає простору);
		- flex-end - вирівнювання по правому краю (між елементами немає простору)
		- space-between - простір між крайням контейнера і елементом відсутній, а між елементами однаковий (відступів немає);
		- space-around - простір між крайням контейнера і елементом складає половину простору між елементами, а між елементами однаковий (відступів немає);;
	- align-items - вирівнювання за не основною віссю:
		- stretch - елементи вирівннюються по верху, а висота приймає значення елемента з найвищим контентом;
		- flex-start - елементи вирівннюється по верху, а висота приймає значення контенту елементу;
		- flex-end - елементи вирівннюються по низу, а висота приймає значення контенту елементу;
		- flex-center - елементи вирівннюються по середині, а висота приймає значення контенту елементу;
		- baseline - елементи вирівннюються по базовій лінії, а висота приймає значення контенту елементу;
	- flex-wrap - керує перехідом елементу на нову стрічку:
		- nowrap - елементи не переходять на нову стрічку;
		- wrap - елементи переходять на нову стрічку;
		- wrap-reverse - елементи переходять на нову стрічку у зворотньому порядку.
18. 20 Теорія flex - елемент: 
	- align-self - перевизначає вирівннювання елементів:
		- stretch - елементи вирівннюються по верху, а висота приймає значення елемента з найвищим контентом;
		- center - елементи вирівннюються по середині, а висота приймає значення контенту елементу;
		- flex-start - елементи вирівннюється по верху, а висота приймає значення контенту елементу;
		- flex-end - елементи вирівннюються по низу, а висота приймає значення контенту елементу;
	- order - змінює порядок виводу flex-елементів
	- flex-basis - базовий розмір flex-елементів:
		- auto - базовий розмір flex-елементу рівний розміру контенту (значення за замовчуванням);
		- __px - базовий розмір flex-елементу у пікселях;
		- __% - базовий розмір flex-елементу у відсотках;
	- flex-grow - можливість flex-елементів ставати БІЛЬШИМ за значення flex-basis:
		- 0 - заборонено ставати більшим (за замовчуванням);
		- 1 - дозволено ставати більшим;
	- flex-shrink - можливість flex-елементів ставати МЕНШИМ за значення flex-basis:<br>
		- 0 - заборонено ставати більшим;<br>
		- 1 - дозволено ставати більшим (за замовчуванням);	
	- flex - встановлює значення flex-grow flex-shrink flex-basis у наведеному порядку		
19. 21 Теорія flex - контейнер - властивість direction:
	- flex-direction - встановлює основну вісь для flex-елементів:
		- row - вистроювання flex-елементів у ряд з ліва направо (за замовчуванням);
		- row-reverse - вистроювання flex-елементів у ряд з права на ліво у зворотньому порядку;
		- column - вистроювання flex-елементів у колонку;
		- column-reverse - вистроювання flex-елементів у колонку у зворотньому порядку;
20. 22 Теорія flex - макет:
	- wrapper - оболонка усієї сторінки, що встановлює:
		- min-height: 100%; - задає ВИСОТУ сторінки (займає всю ширину);
		- overflow: hidden; - не приховує зміст сторінки;
		- display: flex; - створює FLEX-контейнер сторінки;
		- flex-direction: column; - орієнтує у стовпчик FLEX-елементи сторінки;

	- head (відсутній) - FLEX-елемент - ГОЛОВНА частина сторінки (меню):
		- flex: 0 0 ___px; - задає БАЗОВУ ВИСОТУ без можливості змінювати її; 

	- content (body) - FLEX-елемент - КОНТЕНТ сторінки:
		- flex: 1 1 auto; - адаптує розміри БАЗОВОЇ ВИСОТИ під розміри контенту;
	
	- БЛОК КОНТЕНТУ складається: 
		- block - блок виділяє місце БЛОКУ на всю ширину екрану;
			- conteiner - [margin: 0 auto; max-width:___px] - задає ШИРИНУ БЛОКУ ; 
				- block__row - [display: flex;] - FLEX-контейнер БЛОКУ;
					- block__column - [flex: 0 0 auto;] - FLEX-елемент БЛОКУ;

	- БЛОК ЕЛЕМЕНТУ складається: 
		- item - блок виділяє місце БЛОКУ у БЛОЦІ КОНТЕНТУ/ЕЛЕМЕНТУ; 
			- item__row - [display: flex;] -  FLEX-контейнер БЛОКУ;
				- item__column - [flex: 0 0 auto;] - FLEX-елемент БЛОКУ;

	- БЛОК КАРТОК
		- column - [display: flex;] - задає:- висоту блоку по картці з за максимальною висотою;
														- порядок виводу карток;
			- item - [display: flex; flex-direction: column;] - створює картку вишукуючі записи по вертикалі
				- text - [flex: 0 0 auto;] - прибиває нижню частину картки до низу			

	- footer - FLEX-елемент - ПІДВАЛ сторінки:
		- flex: 0 0 ___px; - встановлює БАЗОВУ ВИСОТУ без можливості змінювати її;
	
	- conteiner - визначає ШИРИНУ FLEX-елемент/БЛОКУ: 
		- max-width: 1180px - задає ширину;
		- margin: 0 auto; - центрує

	- ВІДСТУПИ МІЖ FFLEX-елементами:
		- margin: 0 -10px; - розширяємо FLEX-контейнер на 1/2 відступу між FLEX-елементами  
		- padding: 0 10px; - звужуємо FLEX-елемент на 1/2 відступу між ними  			
21. 23 Теорія Адаптивної вестки - маке:
	- контейнер - conteiner - визначає ШИРИНУ контентної частини: 
		- max-width: 1180px - задає ширину;
		- margin: 0 auto; - центрує
	- фіксована верстка - не адаптується:
		- <meta name="viewport" content="width=1200">
		- body
			min-width:1200px	
		- conteiner
			width: 1200px - задає ширину;
	- чуйна вестка - резинова
		- <meta name="viewport" content="width=device-width">
		- conteiner
			max-width: 1200px - задає ширину;
	- адаптивна верстка - з брейкпоінтами
		- <meta name="viewport" content="width=device-width">
		- max-width:1200px для HD моніторів шириною 1180рх
			.contener	{	max-width: 1200px;		}
		- 1 брейкпоинт переходить на max-width: 970px; - для моніторів шириною 1024p
			@media (max-width:1200px) 	{	.contener	{	max-width: 970px;		}	}
		- 2 брейкпоинт переходить на max-width: 750px; - для планшетів шириною 760px
			@media (max-width:992px) 	{	.contener	{	max-width: 750px;		}	}
		- 3 брейкпоинт переходить на max-width: none;
			@media (max-width:767px)	{	.contener	{	max-width: none;		}	}
	- чуйно - резинова з брейкпоінтами
		- @media ТИП УМОВИ (ХАРАКТЕРИСТИКА ПРИСТРОЮ) { СТИЛІ } :
			- ТИП УМОВИ - пристрої:
				- all - стилі для всіх типів пристрою (значення за замовчуванням)
				- print - стилі для попереднього переглюду документів 
				- screen - стілі для кольорових моніторів
				- speech - стілі для синтезаторів мови
			- ХАРАКТЕРИСТИКА ПРИСТРОЮ - визначає коли будуть застосовані { СТИЛІ }	
				- orientation - відповідає за положення пристрою:
					- portrait - портретне
					- landscape - альбомне
				- resolution (: 360dpi) - кількість точок на 1 дюйм екрана
				- max-resolution - максимальна кількість точок на 1 дюйм екрана 
				- min-resolution - мінімальна кількість точок на 1 дюйм екрана
				- monochrome - для чорнобілого екрану
				- max-width (: 767px) - максимальній ширині екрану
				- min-width (: 767px) - мінімальній ширині екрану
				- max-height (: 500px) - максимальній висоті екрану - для full-screen сайту
				- min-height (: 500px) - мінімальній висоті екрану - для full-screen сайту
			- логічні оперції:
				- AND - жорстка умова:
					@media screen and (max-width: 767px;)
				- OR/"," - гнучка умова:
					@media screen or (max-width: 767px;)
					@media screen and (max-width: 767px;) , screen and (max-height: 500px;)
					@media screen and (max-width: 767px;) or screen and (max-height: 500px;)
		- медіа запити краще групувати під стилями до яких вони відносяться;	
		- css - медіа запит підключає файл стилю якщо виконуються вказані умови:
			@import url(/23_adaptivmaket/adaptivmaket/css/color.css) screen and (color);
		- html - медіа	запит підключає файл стилю якщо виконуються вказані умови:
			<link rel="stylesheet" media="screen and (color)" href="css/adaptiv.css">
	- mobile-first - для мобільних:
		- спочатку верстається мобільна версія сайту 
	 	- за домогою @media-запитів верстається на більші екрани:
			- min-width - задається при перході на більший екран;
			- min-height - задається при перході на більший екран;
		- <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scable=0"> - 
			- initial-scale=1.0 - скидання в 1 початкового маштабу сайта
			- maximum-scale=1.0 - забороняємо збільшувати маштаб
			- user-scable=0 - забороняємо для інших пристрої маштабувати верстку
		- перед застосуванням необхідно впевнитись:
			- розмір і шрифт тексту хорошо видно і читтається
			- верстка зручна
			- адаптив не ламає верстку 
22. 24 Теорія CSS - transitions: 
	- transition-duration - тривалість 
		- transition-duration: 500ms; - 500 мілісекунд
		- transition-duration: 5s; - 5 секунд
		- transition-duration: 3s, 200ms, 0.8s; - 3 секунди тривалість властивості-1; 200 мілісекунд тривалістьвластивості-2; 0,8 секунди тривалість властивості-3
	- transition-property - вказано перелік властивостей за якими виконується перехід
		- transition-property: all; - для всіх властивостей перходу
		- transition-property: background-color; - перхід тільки для фону
		- transition-property: background-color, top; - перхід для фону, відступу зверху
	- transition-delay - затримка виконання переходу
		- transition-delay: 200ms; - затримка виконання на 200мс
		- transition-duration: 0s, 100ms, 100ms; - 0c затримка 1-перходу; 100мc затримка 2-перходу;100мc затримка 3-перходу
	- transition-timing-function - стиль/сценарій переход:
		- ease - (за замовчуванням) початок-пришвидшується, середина-уповільнюється, завершення-пришвидшується
		- easy-in - початок-повільний, середина-рівна, завершення-пришвидшується
		- easy-out - початок-швидкий, середина-рівна, завершення-уповільнюється
		- easy-in-out - початок-повільний, середина-рівна, завершення-уповільнюється
		- linear - початок, середина, завершення - -рівномірні
		- steps(5, start) - тривалість перходу поділена на 5 кроків, анімація починається відразу на кожному кроці
		- steps(5, end) - тривалість перходу поділена на 5 кроків, анімація починається з атримкою на кожному кроці
		- cubic-bezier - створення власного сценарію
	- transition: property (властивість), duration (тривалість), timing-function(сценарій перходу), delay (затримка)
23. 25 Теорія CSS animation и @keyframes: 
	- animation-name: "им'я ключових кадрів - 1" , "им'я ключових кадрів - 2"
	- animation-duration: "тривалість анімації - 1", "тривалість анімації - 2"
	- animation-timing-function - стиль/сценарій переход:
		- ease - (за замовчуванням) початок-пришвидшується, середина-уповільнюється, завершення-пришвидшується
		- easy-in - початок-повільний, середина-рівна, завершення-пришвидшується
		- easy-out - початок-швидкий, середина-рівна, завершення-уповільнюється
		- easy-in-out - початок-повільний, середина-рівна, завершення-уповільнюється
		- linear - початок, середина, завершення - -рівномірні
		- steps(5, start) - тривалість перходу поділена на 5 кроків, анімація починається відразу на кожному кроці
		- steps(5, end) - тривалість перходу поділена на 5 кроків, анімація починається з атримкою на кожному кроці
		- cubic-bezier - створення власного сценарію
	- animation-iteration-count - "кількість повторів - 1", "кількість повторів - 2"	:
		- infinite - програється нескінченно
	- animation-direction - напрям програвання анімації
		- normal - звичайний прохід
		- alternate - кожен парний прохід у програється у зворотньому напрямку
		- alternate-reverse - кожен непарний прохід у програється у зворотньому напрямку
		- reverse - програється задом наперед	
	- animation-play-state - старт/стоп анімації	
	- animation-delay - затримка анімації
	- animation-fill-mode - які значення властивостей, що анімуються застосуються після завершення агмації
		- forwards - застосовуються кінцеві значення анімації
		- none -повернення до початкових значень
	- animation - короткий запис анімації:
		- animation-name - им'я ключових кадрів
		- animation-duration - тривалість анімації
		- animation-timing-function - сценарій анімації
		- animation-iteration-count - кількість повторів
		- animation-direction - напрям програвання анімації
		- animation-delay - затримка анімації
		- animation-fill-mode - значення властивостей після завершення агмації	
24. 26 Теорія Форматы изображений в веб-разработке и виды графики сайт: 
	- типи зображкнь:
		- растрова - складається з пікселів - фотографія
		- векторна - складається з фігур, що мають контур та його заливки - схематичний малюнок
	- збільшення зменшення екрану
		- растрова - розмивається
		- векторна - без змін
	- розмір
		- растрова - розмір залежить від розміру картинки
		- векторна - розмір залежить від кількості фігур
	- складне зображення
		- растрова - менше
		- векторна - більше
	- застосування:
		- іконки - векторні зображення
		- фон - растрові зображення
		- елементи дизайна + анімація - растрові зображення
		- контентні картинки - растрові зображення
	- застосування форматів зображеннь:
		- jpeg/jpg-растрова (можлива оптимізація) - контентні зображення
		- png-растрова (прозорий фон) - елементи сайту та фон
		- gif-растрова (анімація, 256 кольорів) - елементи сайту (мало популярний)
		- svg-векторна (мали розмір) - іконки, шрифт
		- webp-растрова (прозорий фон, анімація, маленький розмір, можлива оптимізація) - фон, елементи дизайну(мало пітримка браузерами) 
		- ico-растрова (прозорий фон) - іконки 
25. 27 Теорія Зображення - адаптивні зображення. Практичні прийоми верстки картинок. CSS object-fit HTML picture: 
	- зображення у контентні 
		- widht:100% -роздягує/стискає всі зображення
		- max-widht:100% - задає максимальну ширину тому малі картинки мають власний розмір (не розтягуються)
	- зображення у колонках складається з :
		- блоку зображення div:
			- position: relative; - позиціонування - відносне
			- padding: 0 0 58% 0; - задаємо висоту блоку і картинки
			- overflow: hidden; за межами блоку все скриваємо
		- зображенню img:
			- position: absolute; - позицонування - абсолютне
			- top: 0; - відступ зверху =0
			- width: 100%; - ширина
			- height:  100%; - висота
			- object-fit: cover; (потрбне значення) - тип заповнення
				- fill - повністю заповнює ширину та висоту;	
				- contain - повністю помістись у батьківсбкий контейнер
				- none - зображення повністю вбудовуються у батьківсбкий контейнер
				- cover - зображення маштабуються так, щоб максимально вбудуватись у батьківсбкий контейнер
			- object-position:center; (потрбне значення) - позиціонування зображеня:
				- center - центрування по вертикалі/горизонталі;
				- top - вирівнювання по верхньому краю батьківського контейнеру
				- bottom - вирівнювання по нижньому краю батьківського контейнеру
				- left - вирівнювання по лівому краю батьківського контейнеру
				- right - вирівнювання по правому краю батьківського контейнеру
				- 0 0 - відступ злівого та верхнього краю батьківського контейнеру у пікселях/процентах
	- зображення у рядках складається з :
		- блоку зображення div:
			- position: relative; - позиціонування - відносне (адаптивна висота)
			- flex: 0 0 33.333%; - ширина 33% (адаптивна ширина)
			- min-height: 150px; - мінімальна висота задана на випадок відсутності/малого контенту
			- overflow: hidden; за межами блоку все скриваємо
		- зображенню img:
			- position: absolute; - позицонування - абсолютне (адаптивна верстка)
			- top: 0; - відступ зверху =0 (адаптивна висота)
			- left: 0; - відступ зліва =0 (адаптивна висота)
			- width: 100%; - ширина
			- height: 100%; - висота
			- object-fit: cover; (потрбне значення) - тип заповнення
	- picture - контейнер з зображеннями, вивід яких визначають умови
		- source - вихідне зображення, що відповідає вказаній умові:
			- srcset="img/1300x400.jpg 2x" - де:
				- img/1300x400.jpg - шлях до зображення
				- 2х - щільність пікселей екрана (зображення зменшиться у 2 рази)
			- type="image/jpeg" - тип зображення
			- media="(min-width:1330px)" - медіазапит-умова виводу зображення
		- img - для ІЕ		
